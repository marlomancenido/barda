import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:barda/main.dart' as app;

// Legends:
// ðŸ˜€ - Happy Path
// ðŸ˜” - Unhappy Path
//
// Number of Tested Paths: 13

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('[1] Registration/Logging In', () {
    testWidgets('> Signing Up (ðŸ˜”)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // Setup Finders
      final registerbutton = find.byKey(Key('regbutton'));

      // Registering:
      // First name: Sample, Last name: User
      // Username: user1, Password: password
      await tester.tap(registerbutton);

      await tester.pumpAndSettle();

      final reg_first = find.byKey(Key('reg_fname'));
      final reg_last = find.byKey(Key('reg_lname'));
      final reg_username = find.byKey(Key('reg_uname'));
      final reg_pass = find.byKey(Key('reg_pass'));
      final reg_submit = find.byKey(Key('reg_submit'));

      await tester.tap(reg_first);
      await tester.enterText(reg_first, 'Sample');
      await tester.tap(reg_last);
      await tester.enterText(reg_last, 'User');
      await tester.tap(reg_username);
      await tester.enterText(reg_username, 'user1');
      await tester.tap(reg_pass);
      await tester.enterText(reg_pass, 'password');
      await tester.tap(reg_submit);
      await Future.delayed(Duration(milliseconds: 2400));

      await tester.pumpAndSettle();
      await Future.delayed(Duration(milliseconds: 2400));

      // Should return an error since this user is already existing
      expect(find.byKey(const Key('error_snbar')), findsOneWidget);
    });
    testWidgets('> Logging In (ðŸ˜”)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // Setup all Finders
      final loginbutton = find.byKey(Key('login_btn'));

      // Logging In:
      // Username: user1, Password: password2
      await tester.tap(loginbutton);
      await tester.pumpAndSettle();

      final loginUN = find.byKey(Key('login_un'));
      final loginPW = find.byKey(Key('login_pw'));
      final submitbutton = find.byKey(Key('submitlogin_btn'));
      await tester.tap(loginUN);
      await tester.enterText(loginUN, 'user1');
      await tester.tap(loginPW);
      await tester.enterText(loginPW, 'password2');
      await tester.tap(submitbutton);
      await Future.delayed(Duration(milliseconds: 2400));
      await tester.pumpAndSettle();
      await Future.delayed(Duration(milliseconds: 2400));

      // Expecting an error since the password is incorrect
      expect(find.byKey(Key('error_snbar')), findsOneWidget);
    });
    testWidgets('> Logging In (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // Setup all Finders
      final loginbutton = find.byKey(Key('login_btn'));

      // Logging In:
      // Username: user1, Password: password
      await tester.tap(loginbutton);
      await tester.pumpAndSettle();

      final loginUN = find.byKey(Key('login_un'));
      final loginPW = find.byKey(Key('login_pw'));
      final submitbutton = find.byKey(Key('submitlogin_btn'));
      await tester.tap(loginUN);
      await tester.enterText(loginUN, 'user1');
      await tester.tap(loginPW);
      await tester.enterText(loginPW, 'password');
      await Future.delayed(Duration(milliseconds: 2400));
      await tester.tap(submitbutton);
      await tester.pumpAndSettle();
      await Future.delayed(Duration(milliseconds: 2400));

      // Expecting no errors since the password is correct
      expect(find.byKey(Key('error_snbar')), findsNothing);
      await Future.delayed(Duration(milliseconds: 2400));
    });
  });

  group('[2] Posts/Comments', () {
    testWidgets('> Making a New Post (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // Navigate to Create Page
      final create = find.byKey(Key('create_btn'));
      await tester.tap(create);
      await tester.pumpAndSettle();

      // Making a New Post
      // Finders
      final text = find.byKey(Key('crt_text'));
      final public = find.byKey(Key('crt_public'));
      final submit = find.byKey(Key('crt_submit'));
      // Setting
      await tester.tap(text);
      await tester.enterText(
          text, 'This is generated by the integration test.');
      await tester.tap(public);
      await tester.tap(submit);

      // Confirming
      await tester.pumpAndSettle();
      expect(find.byKey(const Key('success_snbar')), findsOneWidget);
    });
    testWidgets('> Making a comment (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final postcntr = find.byKey(Key('post_cntr'));
      await tester.tap(postcntr.first);
      await tester.pumpAndSettle();

      final add_comment = find.byKey(Key('add_comment'));
      await tester.tap(add_comment);
      await tester.pumpAndSettle();

      final comment_text = find.byKey(Key('comment_text'));
      final comment_push = find.byKey(Key('comment_submit'));
      await tester.tap(comment_text);
      await tester.enterText(comment_text, 'This is an automated comment');
      await tester.tap(comment_push);

      await tester.pumpAndSettle();
      expect(find.byKey(Key('success_snbar')), findsOneWidget);

      await tester.pumpAndSettle();
      final delete_btn = find.byKey(Key('del_comment'));
      await tester.tap(delete_btn);
      await tester.pumpAndSettle();

      expect(find.byKey(Key('success_snbar')), findsOneWidget);
    });
    testWidgets('> Editing a post (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final postcntr = find.byKey(Key('post_cntr'));
      await tester.tap(postcntr.first);
      await tester.pumpAndSettle();

      final editbtn = find.byKey(Key('edit_post'));
      await tester.tap(editbtn);
      await tester.pumpAndSettle();

      final text = find.byKey(Key('edit_text'));
      final priv = find.byKey(Key('edit_priv'));
      final submit = find.byKey(Key('edit_submit'));

      await tester.tap(text);
      await tester.enterText(text, 'Editing is handled by testing.');
      await tester.tap(priv);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.tap(submit);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.pumpAndSettle();

      expect(find.byIcon(Icons.group), findsOneWidget);
    });
    testWidgets('> Deleting a post (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final postcntr = find.byKey(Key('post_cntr'));
      await tester.tap(postcntr.first);
      await tester.pumpAndSettle();

      final delbtn = find.byKey(Key('del_post'));
      await tester.tap(delbtn);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.pumpAndSettle();

      expect(find.byKey(Key('success_snbar')), findsOneWidget);
    });
  });

  group('[3] Users', () {
    testWidgets(
        '> Go to Auth User\'s Profile / See their posts / Edit a post (ðŸ˜€)',
        (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final userbtn = find.byKey(Key('profile_btn'));
      await tester.tap(userbtn);
      await tester.pumpAndSettle();

      final post = find.byKey(Key('post_cntr'));
      await tester.tap(post.first);
      await tester.pumpAndSettle();

      final editbtn = find.byKey(Key('edit_post'));
      await tester.tap(editbtn);
      await tester.pumpAndSettle();

      final text = find.byKey(Key('edit_text'));
      final priv = find.byKey(Key('edit_priv'));
      final submit = find.byKey(Key('edit_submit'));

      await tester.tap(text);
      await tester.enterText(text, 'Editing is handled by testing.');
      await tester.tap(priv);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.tap(submit);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.pumpAndSettle();

      expect(find.byKey(Key('success_snbar')), findsOneWidget);
    });
    testWidgets(
        '> Follow another user / View their profile / View all their posts (ðŸ˜€)',
        (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final user = find.byKey(Key('post_user'));
      await tester.tap(user.first);
      await tester.pumpAndSettle();

      final follow = find.byKey(Key('follow_btn'));
      await Future.delayed(Duration(milliseconds: 400));
      await tester.tap(follow);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.pumpAndSettle();

      expect(find.byKey(Key('success_snbar')), findsOneWidget);
    });
    testWidgets('> View Friends / Unfollow one (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final userbtn = find.byKey(Key('profile_btn'));
      await tester.tap(userbtn);
      await tester.pumpAndSettle();

      final friendsbtn = find.byKey(Key('friends_btn'));
      await tester.tap(friendsbtn);
      await tester.pumpAndSettle();

      final friendcard = find.byKey(Key('friendcard'));
      await tester.tap(friendcard.first);
      await tester.pumpAndSettle();

      final unfollow = find.byKey(Key('unfollow_btn'));
      await tester.tap(unfollow);
      await tester.pumpAndSettle();

      expect(find.byKey(Key('success_snbar')), findsOneWidget);
    });
  });

  group('[4] User Settings/Logout', () {
    testWidgets('> Update password fail (ðŸ˜”)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final profilebtn = find.byKey(Key('profile_btn'));
      await tester.tap(profilebtn);
      await tester.pumpAndSettle();

      final settings = find.byKey(Key('settings_btn'));
      await tester.tap(settings);
      await tester.pumpAndSettle();

      final changer = find.byKey(Key('ch_pass'));
      await tester.tap(changer);
      await tester.pumpAndSettle();

      final oldpass = find.byKey(Key('old_pass'));
      final newpass = find.byKey(Key('new_pass'));
      final newpass_c = find.byKey(Key('new_pass_c'));
      final submit = find.byKey(Key('pass_submit'));

      // Entering a wrong old pass
      await tester.tap(oldpass);
      await tester.enterText(oldpass, 'pass');
      await tester.tap(newpass);
      await tester.enterText(newpass, 'newpass');
      await tester.tap(newpass_c);
      await tester.enterText(newpass_c, 'newpass');
      await tester.tap(submit);
      await Future.delayed(Duration(milliseconds: 800));
      await tester.pumpAndSettle();

      expect(find.byKey(Key('error_snbar')), findsOneWidget);
    });

    testWidgets('> Update password success (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final profilebtn = find.byKey(Key('profile_btn'));
      await tester.tap(profilebtn);
      await tester.pumpAndSettle();

      final settings = find.byKey(Key('settings_btn'));
      await tester.tap(settings);
      await tester.pumpAndSettle();

      final changer = find.byKey(Key('ch_pass'));
      await tester.tap(changer);
      await tester.pumpAndSettle();

      final oldpass = find.byKey(Key('old_pass'));
      final newpass = find.byKey(Key('new_pass'));
      final newpass_c = find.byKey(Key('new_pass_c'));
      final submit = find.byKey(Key('pass_submit'));

      await tester.tap(oldpass);
      await tester.enterText(oldpass, 'password');
      await tester.tap(newpass);
      await tester.enterText(newpass, 'newpass');
      await tester.tap(newpass_c);
      await tester.enterText(newpass_c, 'newpass');
      await Future.delayed(Duration(milliseconds: 400));
      await tester.tap(submit);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.pumpAndSettle();

      expect(find.byKey(Key('success_snbar')), findsOneWidget);

      // Reverting change done
      await tester.tap(changer);
      await tester.pumpAndSettle();

      final oldpass_ = find.byKey(Key('old_pass'));
      final newpass_ = find.byKey(Key('new_pass'));
      final newpass_c_ = find.byKey(Key('new_pass_c'));
      final submit_ = find.byKey(Key('pass_submit'));

      await tester.tap(oldpass_);
      await tester.enterText(oldpass_, 'newpass');
      await tester.tap(newpass);
      await tester.enterText(newpass_, 'password');
      await tester.tap(newpass_c);
      await tester.enterText(newpass_c_, 'password');
      await Future.delayed(Duration(milliseconds: 400));
      await tester.tap(submit_);
      await Future.delayed(Duration(milliseconds: 400));
      await tester.pumpAndSettle();
    });

    testWidgets('> Logging out (ðŸ˜€)', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      final profilebtn = find.byKey(Key('profile_btn'));
      await tester.tap(profilebtn);
      await tester.pumpAndSettle();

      final settings = find.byKey(Key('settings_btn'));
      await tester.tap(settings);
      await tester.pumpAndSettle();

      final logout = find.byKey(Key('logout_btn'));
      await tester.tap(logout);
      await tester.pumpAndSettle();

      expect(find.byKey(Key('splash_page')), findsOneWidget);
    });
  });
}
